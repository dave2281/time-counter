<% content_for :title, @deed.title %>

<div class="min-h-screen">
  <!-- Compact header -->
  <div class="bg-gray-900 border-b border-gray-800">
    <div class="max-w-4xl mx-auto px-4 py-3">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <%= link_to root_path, class: "text-gray-400 hover:text-white transition-colors text-sm" do %>
            ← Tasks
          <% end %>
          <div class="h-4 w-px bg-gray-700"></div>
          <h1 class="text-lg font-medium text-white truncate max-w-md"><%= @deed.title %></h1>
        </div>
        <div class="flex items-center gap-2">
          <%= link_to "Edit", edit_deed_path(@deed), class: "px-3 py-1.5 text-xs bg-gray-700 hover:bg-gray-600 text-white rounded-md transition-colors" %>
          <%= button_to "Delete", deed_path(@deed), method: :delete,
              data: { confirm: "Are you sure?" },
              class: "px-3 py-1.5 text-xs text-gray-400 hover:text-red-400 transition-colors" %>
        </div>
      </div>
      <% if @deed.description.present? %>
        <div class="mt-2">
          <button onclick="toggleDescription()" class="flex items-center space-x-2 text-gray-400 hover:text-white transition-colors text-sm group">
            <svg id="description-arrow" class="w-4 h-4 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
            <span>Description</span>
          </button>
          <div id="description-content" class="mt-2 overflow-hidden transition-all duration-300 ease-in-out" style="height: 0;">
            <div class="pb-2">
              <p class="text-gray-300 text-sm leading-relaxed bg-gray-800/30 rounded-md p-3 border-l-2 border-blue-500 whitespace-pre-wrap"><%= @deed.description %></p>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <div class="max-w-4xl mx-auto px-4 py-4 space-y-4">

    <!-- Timer Section - compact -->
    <div class="glass-effect rounded-lg p-4">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-base font-medium text-white">Timer</h2>
        <div class="flex items-center space-x-2">
          <div id="timer-indicator" class="w-2 h-2 rounded-full bg-red-500"></div>
          <span class="text-gray-400 text-xs">Status</span>
        </div>
      </div>
      
      <div class="text-center mb-4">
        <div id="timer-display" class="text-2xl font-mono font-bold text-blue-400 mb-3">00:00:00</div>
        
        <turbo-frame id="deed-timer-frame">
          <div class="flex justify-center gap-2">
            <button id="start-timer" data-deed-id="<%= @deed.id %>" 
              class="px-4 py-2 text-white bg-green-600 hover:bg-green-700 rounded-md font-medium transition-colors text-sm hover-lift">
              Start
            </button>
            <button id="stop-timer" data-deed-id="<%= @deed.id %>" 
              class="px-4 py-2 text-white bg-red-600 hover:bg-red-700 rounded-md font-medium transition-colors text-sm hover-lift">
              Stop
            </button>
          </div>
        </turbo-frame>
      </div>
    </div>

    <!-- Time Stats - compact combined container -->
    <div class="glass-effect rounded-lg p-4">
      <h3 class="text-sm font-medium text-white mb-3 text-center">Time Statistics</h3>
      <div class="grid grid-cols-2 divide-x divide-gray-700">
        <div class="text-center pr-3">
          <p class="text-gray-400 text-xs mb-1">Total Time</p>
          <p id="total-time" class="text-base font-semibold text-white"><%= @deed.total_time %></p>
        </div>
        <div class="text-center pl-3">
          <p class="text-gray-400 text-xs mb-1">Today</p>
          <p id="today-time" class="text-base font-semibold text-white"><%= @deed.today %></p>
        </div>
      </div>
    </div>

      <!-- Task Status - ultra compact -->
    <div class="glass-effect rounded-lg p-3">
      <div class="text-center mb-3">
        <h3 class="text-sm font-medium text-white mb-1">Status</h3>
        <p class="text-gray-400 text-xs">
          <% if @deed.finished? %>
            Completed ✓
          <% else %>
            Mark as complete when finished
          <% end %>
        </p>
      </div>

      <%= form_with(model: @deed, url: deed_path(@deed), method: :patch, local: true, class: "space-y-3") do |form| %>
        <div class="flex items-center justify-center p-2 bg-gray-900/50 rounded-md border border-gray-600">
          <div class="flex items-center space-x-2">
            <%= form.check_box :finished, 
                class: "w-4 h-4 text-green-600 bg-gray-700 border-gray-600 rounded focus:ring-green-500 focus:ring-1",
                onchange: "toggleStatusIndicator(this)" %>
            <%= form.label :finished, class: "text-white text-sm cursor-pointer select-none" do %>
              <span class="flex items-center space-x-1">
                <span id="status-icon" class="<%= @deed.finished? ? 'text-green-400' : 'text-gray-400' %>">
                </span>
                <span id="status-text" class="text-xs"><%= @deed.finished? ? 'Done' : 'Mark Done' %></span>
              </span>
            <% end %>
          </div>
        </div>
        
        <div class="text-center">
          <%= form.submit (@deed.finished? ? "Update" : "Complete"), 
              class: "px-4 py-1.5 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors text-xs hover-lift" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

  <script>
    function toggleStatusIndicator(checkbox) {
      const text = document.getElementById('status-text');
      const submitBtn = checkbox.form.querySelector('input[type="submit"]');
      
      if (checkbox.checked) {
        text.textContent = 'Done';
        submitBtn.textContent = 'Complete';
        submitBtn.className = 'px-4 py-1.5 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors text-xs hover-lift';
      } else {
        text.textContent = 'Mark Done';
        submitBtn.textContent = 'Update';
        submitBtn.className = 'px-4 py-1.5 bg-green-600 hover:bg-green-700 text-white font-medium rounded-md transition-colors text-xs hover-lift';
      }
    }

    let isDescriptionOpen = false;

    function toggleDescription() {
      const content = document.getElementById('description-content');
      const arrow = document.getElementById('description-arrow');
      
      if (!isDescriptionOpen) {
        // Открываем - используем auto для полной высоты
        content.style.height = 'auto';
        arrow.style.transform = 'rotate(180deg)';
        isDescriptionOpen = true;
      } else {
        // Закрываем
        content.style.height = '0';
        arrow.style.transform = 'rotate(0deg)';
        isDescriptionOpen = false;
      }
    }

    // Автоматически показываем описание при загрузке страницы
    document.addEventListener('turbo:load', function() {
      setTimeout(() => {
        if (document.getElementById('description-content')) {
          toggleDescription(); // Открываем по умолчанию
        }
      }, 100);
    });
  </script>
</div>

<script>
    // ГЛОБАЛЬНАЯ ПЕРЕМЕННАЯ для хранения интервала
    let globalTimerInterval = null;

    document.addEventListener("turbo:load", () => {
        // ИСПРАВЛЕНИЕ: Очищаем любые существующие интервалы при загрузке
        if (globalTimerInterval) {
            clearInterval(globalTimerInterval);
            globalTimerInterval = null;
        }

        const timerDisplay = document.getElementById("timer-display");
        const indicator = document.getElementById("timer-indicator");
        const startButton = document.getElementById("start-timer");
        const stopButton = document.getElementById("stop-timer");

        if (!startButton || !stopButton || !timerDisplay || !indicator) return;

        const deedId = startButton.getAttribute("data-deed-id");

        let startTime = null;
        let baseTime = 0;
        let isRunning = false;

        function formatTime(seconds) {
            const hrs = String(Math.floor(seconds / 3600)).padStart(2, "0");
            const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, "0");
            const secs = String(seconds % 60).padStart(2, "0");
            return `${hrs}:${mins}:${secs}`;
        }

        function updateDisplay() {
            if (isRunning && startTime) {
                const currentTime = Math.floor((Date.now() - startTime) / 1000);
                const totalTime = baseTime + currentTime;
                timerDisplay.textContent = formatTime(totalTime);
            } else {
                timerDisplay.textContent = formatTime(baseTime);
            }
        }

        function showError(message) {
            // Показываем ошибку в UI вместо alert
            const errorDiv = document.createElement('div');
            errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-md shadow-lg z-50';
            errorDiv.textContent = message;
            document.body.appendChild(errorDiv);
            
            // Убираем ошибку через 5 секунд
            setTimeout(() => {
                errorDiv.remove();
            }, 5000);
        }

        function startTimer() {
            // ИСПРАВЛЕНИЕ: Используем глобальную переменную
            if (globalTimerInterval) {
                clearInterval(globalTimerInterval);
            }
            
            globalTimerInterval = setInterval(updateDisplay, 1000);
        }

        function stopTimer() {
            // ИСПРАВЛЕНИЕ: Используем глобальную переменную
            if (globalTimerInterval) {
                clearInterval(globalTimerInterval);
                globalTimerInterval = null;
            }
        }

        function updateUI(running, serverStartTime, elapsedTime) {
            isRunning = running;
            
            if (running && serverStartTime) {
                startTime = Date.now() - (elapsedTime * 1000);
                baseTime = 0;
                indicator.classList.remove("bg-red-500");
                indicator.classList.add("bg-green-500");
                startButton.disabled = true;
                stopButton.disabled = false;
                startButton.classList.add("opacity-50");
                stopButton.classList.remove("opacity-50");
                startTimer();
            } else {
                startTime = null;
                baseTime = elapsedTime || 0;
                indicator.classList.remove("bg-green-500");
                indicator.classList.add("bg-red-500");
                startButton.disabled = false;
                stopButton.disabled = true;
                startButton.classList.remove("opacity-50");
                stopButton.classList.add("opacity-50");
                stopTimer();
            }
            
            updateDisplay();
        }

        function initTimer() {
            fetch(`/daily_logs/timer_status?deed_id=${deedId}`)
              .then(res => {
                  if (!res.ok) {
                      // Тихо игнорируем ошибки при фоновых проверках
                      return null;
                  }
                  return res.json();
              })
              .then(data => {
                  if (data) {
                      updateUI(data.running, data.start_time, data.elapsed_time || 0);
                  }
              })
              .catch(error => {
                  // Только логируем, не показываем пользователю
                  console.log("Timer status check failed:", error);
              });
        }

        startButton.addEventListener("click", () => {
            // Блокируем кнопку для предотвращения множественных запросов
            startButton.disabled = true;
            startButton.classList.add("opacity-50");
            
            fetch("/daily_logs/start_timer", {
                method: "POST", 
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
                },
                body: JSON.stringify({ deed_id: deedId })
            })
              .then(res => {
                  if (!res.ok) {
                      return res.json().then(err => Promise.reject(err));
                  }
                  return res.json();
              })
              .then(data => {
                  if (data.running) {
                      updateUI(true, data.start_time, 0);
                  }
              })
              .catch(error => {
                  console.error("Start timer error:", error);
                  if (error.error) {
                      // Показываем ошибку через UI вместо alert
                      showError(error.error);
                  }
                  // Разблокируем кнопку при ошибке
                  startButton.disabled = false;
                  startButton.classList.remove("opacity-50");
              });
        });

        stopButton.addEventListener("click", () => {
            fetch("/daily_logs/stop_timer", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-CSRF-Token": document.querySelector('meta[name="csrf-token"]').getAttribute("content")
                },
                body: JSON.stringify({ deed_id: deedId })
            })
              .then(res => res.json())
              .then(data => {
                  if (data.hasOwnProperty('running')) {
                      updateUI(false, null, data.elapsed_time);
                      if (data.today_formatted) {
                          document.getElementById("today-time").textContent = data.today_formatted;
                      }
                  }
              })
              .catch(error => console.error("Stop timer error:", error));
        });

        initTimer();
        
        // Убираем периодические проверки, которые могут спамить ошибками
        // setInterval(initTimer, 30000);
    });

    // ИСПРАВЛЕНИЕ: Очищаем интервал при выходе со страницы
    document.addEventListener("turbo:before-visit", () => {
        if (globalTimerInterval) {
            clearInterval(globalTimerInterval);
            globalTimerInterval = null;
        }
    });

    // Дополнительная очистка при выгрузке страницы
    window.addEventListener("beforeunload", () => {
        if (globalTimerInterval) {
            clearInterval(globalTimerInterval);
            globalTimerInterval = null;
        }
    });
</script>
